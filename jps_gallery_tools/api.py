# AUTOGENERATED! DO NOT EDIT! File to edit: ../api.ipynb.

# %% auto 0
__all__ = ['Component', 'Media', 'IIIF', 'UrlImage', 'Part', 'ListPart', 'ListExternalLinkPart', 'JPSGalleryClient']

# %% ../api.ipynb 3
from pprint import pprint
import os
import json

class Component:
    
    def export(self):
        '''
        エクスポート

        Returns:
        * dict containing representation of the gallery
        '''
        return self.item

    def setMetadata(self, key, lang, value):
        '''
        メタデータの設定

        Parameters:
        * `key` - title, description, etc...
        * `lang` - one of 言語, eg: 'ja', 'en', 'yomi'
        * `value` - 値
        '''
        item = self.item
        if key not in item:
            item[key] = {}
        item[key][lang] = value


    def save(self, path):
        '''
        JSONファイルの保存

        Parameters:
        * `path` - 出力先のパス
        '''
        os.makedirs(os.path.dirname(path), exist_ok=True)
        with open(path, 'w') as f:
            json.dump(self.item, f, ensure_ascii=False, indent=2)

class Media(Component):

    def __init__(self, type, title, source):
        self.item = {
            "imgType": type,
            "cover": None,
            "sourceUrl": None,
            "title": {
                "ja": title
            },
            "source": {
                "ja": source
            },
            "contentsRightsType": "various",
        }

class IIIF(Media):
    def __init__(self, manifestUrl, infoJsonUrl, title, source):
        super().__init__("IIIF", title, source)

        item = self.item
        item["cover"] = None
        item["sourceUrl"] = None
        item["manifestUrl"] = manifestUrl
        item["infoJsonUrl"] = infoJsonUrl

class UrlImage(Media):
    """
    URLを指定して表示する画像に関するクラス
    """

    def __init__(self, url, title, source, thumbnailUrl=None):
        """
        初期化

        Parameters:
        * `url` - 画像URL
        * `title` - 日本語のタイトル
        * `source` - 日本語の出典
        * `thumbnailUrl` - サムネイルURL
        """
        super().__init__("URL", title, source)

        item = self.item

        item["url"] = url
        if thumbnailUrl is not None:
            item["thumbnailUrl"] = thumbnailUrl



class Part(Component):
    
    configType = {
        # "text": "jps-curation-text",
        # "list": "jps-curation-list",
    }

    def __init__(self, type): # , viewType=None
        item = {}
        self.item = item
        item["cpid"] = "a"

        configType = self.configType

        type = configType[type] if type in configType else type
        item["type"] = type
        
        '''
        if type == "jps-curation-list":

            if viewType:
                item["viewType"] = viewType

            item["parts"] = []
        '''

    def insertText(self, lang, value):
        '''
        削除予定
        '''
        item = self.item

        if lang not in item:
            item[lang] = {
                "ops": []
            }

        ops = item[lang]["ops"]
        ops.append({
            "insert": value
        })
        ops.append({
            "insert": "\n"
        })

    def addOps(self, key, lang, value):
        '''
        opsに要素を追加します。

        Parameters:
        * `key` - title, description, etc...
        * `lang` - one of 言語, eg: 'ja', 'en', 'yomi'
        * `value` - 値
        '''
        item = self.item
        if key not in item:
            item[key] = {}

        if lang not in item[key]:
            item[key][lang] = {
                "ops": []
            }

        ops = item[key][lang]["ops"]
        ops.append({
            "insert": value
        })
        ops.append({
            "insert": "\n"
        })

    def setMetadata(self, key, lang, value):
        item = self.item
        if key not in item:
            item[key] = {}

        # self.item[key] = value
        item[key][lang] = value

    def setUrl(self, url):
        self.item["url"] = url

    def addPart(self, part):
        self.item["parts"].append(part.export())    

    def setImage(self, image):
        self.item["image"] = image.export()

class ListPart(Part):
    '''
    リストパーツ
    '''
    def __init__(self, viewType):
        '''
        初期化

        Parameters:
        * `viewType` - レイアウト, eg: 'tile', 'en'
        '''
        super().__init__("list") # , viewType

        item = self.item

        item["viewType"] = viewType

        item["parts"] = []

class ListExternalLinkPart(Part):
    '''
    ListExternalLinkPart
    '''
    
    def __init__(self):
        '''
        初期化
        '''
        super().__init__("jps-curation-list-external-link")

    
    def setUrl(self, url):
        '''
        外部リンクのURLを設定します。

        Parameters:
        * `url` - 外部リンクのURL
        '''
        self.item["url"] = url

class JPSGalleryClient(Component):

    item = {
        "version": 1,
        "seqNo": 0,
        "primaryTerm": 1,
        "curationType": "GALLERY",
        "title": {},
        "summary": {},
        "responsibility": {},
        "workspace": "abc",
        "workspaceTags": [],
        "permission": {
            "publicationLevel": "WORKSPACE",
            "level": "ADMIN"
        },
        "edit": {
            "userId": "system",
            "orgId": "jpsws",
            "date": 1663722096491,
            "action": "CREATE"
        },
        "parts": []
    }

    def __init__(self):
        self.item["id"] = "aaa"

    def setTitle(self, key, value):
        self.item["title"][key] = value

    def setSummary(self, key, value):
        self.item["summary"][key] = value

    

    def addTag(self, tag):
        '''
        タグを追加します。

        Parameters:
        * `tag` - タグ
        '''
        item = self.item
        item["workspaceTags"].append(tag)

    def setImage(self, image):
        self.item["image"] = image.export()

    def saveJsonl(self, path):
        '''
        JSONLファイルの保存

        Parameters:
        * `path` - 出力先のパス
        '''

        arr = []
        arr.append(json.dumps(self.item, ensure_ascii=False))

        os.makedirs(os.path.dirname(path), exist_ok=True)
        with open(path, mode='w') as f:
            f.write("\n".join(arr))
